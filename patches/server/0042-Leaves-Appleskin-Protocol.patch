From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Wed, 25 Jan 2023 11:03:53 +0800
Subject: [PATCH] Leaves: Appleskin Protocol

Original license: GPLv3
Original project: https://github.com/LeavesMC/Leaves

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 73f4f0ea032400d1326f220c9d287aeac0f9b201..b57a5920b030ca714d6474ca2827afa0e581d07d 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1622,6 +1622,7 @@ public abstract class MinecraftServer extends MinecraftServerBlockableEventLoop
         this.tickStep_tickConnection();
         this.tickStep_tickPlayerList();
         this.tickStep_tickGameTestTicker();
+        this.tickStep_tickLeavesProtocol();
         this.tickStep_runTickables();
     }
 
@@ -1772,6 +1773,12 @@ public abstract class MinecraftServer extends MinecraftServerBlockableEventLoop
         // Gale start - split tick steps
     }
 
+    public final void tickStep_tickLeavesProtocol() {
+        // Gale & Leaf start - split tick steps
+        top.leavesmc.leaves.protocol.AppleSkinProtocol.tick(); // Leaves - appleskin
+        // Gale & Leaf end - split tick steps
+    }
+
     public final void tickStep_runTickables() {
         // Gale end - split tick steps
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index e9372102f70ab6372da05630611f16add4ade063..5007b38f5947f1a12bf1ed56cf974ad77415f08b 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -401,6 +401,7 @@ public abstract class PlayerList {
         player.didPlayerJoinEvent = true; // Gale - EMC - do not process chat/commands before player has joined
 
         top.leavesmc.leaves.protocol.JadeProtocol.onPlayerJoin(player); // Leaves - Jade
+        top.leavesmc.leaves.protocol.AppleSkinProtocol.onPlayerLoggedIn(player); // Leaves - appleskin
 
         final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
@@ -651,6 +652,7 @@ public abstract class PlayerList {
         return this.remove(entityplayer, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? entityplayer.getBukkitEntity().displayName() : PaperAdventure.asAdventure(entityplayer.getDisplayName())));
     }
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
+        top.leavesmc.leaves.protocol.AppleSkinProtocol.onPlayerLoggedOut(entityplayer); // Leaves - appleskin
         // Paper end
         BossBarTask.removeFromAll(entityplayer.getBukkitEntity()); // Purpur
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 86e05b327a8b0b33a2b2e7a0565c9c0ffcb68a02..b501087a9ec6738afac3c8fc8acb446fff45eed8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -970,6 +970,13 @@ public final class CraftServer implements Server {
             top.leavesmc.leaves.protocol.JadeProtocol.enableAllPlayer();
         }
         // Leaves end - Jade
+        // Leaves start - appleskin
+        if (LeafConfig.appleskinProtocol) {
+            top.leavesmc.leaves.protocol.AppleSkinProtocol.enableAllPlayer();
+        } else {
+            top.leavesmc.leaves.protocol.AppleSkinProtocol.disableAllPlayer();
+        }
+        // Leaves end - appleskin
         for (ServerLevel world : this.console.getAllLevelsArray()) { // Gale - base thread pool - optimize server levels
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/dreeam/leaf/LeafConfig.java b/src/main/java/org/dreeam/leaf/LeafConfig.java
index ab4be9f93d20e14f53107222426f3876823fdd10..594e95ad59c202f4b702c6f16f04cb103c46f278 100644
--- a/src/main/java/org/dreeam/leaf/LeafConfig.java
+++ b/src/main/java/org/dreeam/leaf/LeafConfig.java
@@ -357,8 +357,10 @@ public class LeafConfig {
 
     public static boolean kickForOutOfOrderChat = true;
     public static boolean jadeProtocol = false;
+    public static boolean appleskinProtocol = false;
     private static void networkSettings() {
         kickForOutOfOrderChat = getBoolean("network.kick-for-out-of-order-chat", kickForOutOfOrderChat);
         jadeProtocol = getBoolean("network.protocol.jade-protocol", jadeProtocol);
+        appleskinProtocol = getBoolean("network.protocol.appleskin-protocol", appleskinProtocol);
     }
 }
diff --git a/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..61e4447c7b26ad8501cc3d3735b6cd78d5dd1b6e
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java
@@ -0,0 +1,95 @@
+package top.leavesmc.leaves.protocol;
+
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.food.FoodData;
+import org.dreeam.leaf.LeafConfig;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.util.ProtocolUtils;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class AppleSkinProtocol {
+
+    public static final String PROTOCOL_ID = "appleskin";
+
+    private static final ResourceLocation SATURATION_KEY = id("saturation_sync");
+    private static final ResourceLocation EXHAUSTION_KEY = id("exhaustion_sync");
+
+    private static final Map<UUID, Float> previousSaturationLevels = new HashMap<>();
+    private static final Map<UUID, Float> previousExhaustionLevels = new HashMap<>();
+
+    private static final float MINIMUM_EXHAUSTION_CHANGE_THRESHOLD = 0.01F;
+
+    private static final Set<ServerPlayer> players = new HashSet<>();
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+
+    public static void enableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedIn(player);
+        }
+    }
+
+    public static void disableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedOut(player);
+        }
+    }
+
+    public static void onPlayerLoggedIn(@NotNull ServerPlayer player) {
+        if (LeafConfig.appleskinProtocol) {
+            players.add(player);
+            resetPlayerData(player);
+        }
+    }
+
+    public static void onPlayerLoggedOut(@NotNull ServerPlayer player) {
+        if (LeafConfig.appleskinProtocol) {
+            players.remove(player);
+            resetPlayerData(player);
+        }
+    }
+
+    private static void resetPlayerData(@NotNull ServerPlayer player) {
+        previousExhaustionLevels.remove(player.getUUID());
+        previousSaturationLevels.remove(player.getUUID());
+    }
+
+    public static void tick() {
+        if (LeafConfig.appleskinProtocol) {
+            for (ServerPlayer player : players) {
+                FoodData data = player.getFoodData();
+
+                float saturation = data.getSaturationLevel();
+                Float previousSaturation = previousSaturationLevels.get(player.getUUID());
+                if (previousSaturation == null || saturation != previousSaturation) {
+                    FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                    buf.writeFloat(saturation);
+                    ProtocolUtils.sendPayloadPacket(player, SATURATION_KEY, buf);
+                    previousSaturationLevels.put(player.getUUID(), saturation);
+                }
+
+                float exhaustion = data.getExhaustionLevel();
+                Float previousExhaustion = previousExhaustionLevels.get(player.getUUID());
+                if (previousExhaustion == null || Math.abs(exhaustion - previousExhaustion) >= MINIMUM_EXHAUSTION_CHANGE_THRESHOLD) {
+                    FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                    buf.writeFloat(exhaustion);
+                    ProtocolUtils.sendPayloadPacket(player, EXHAUSTION_KEY, buf);
+                    previousExhaustionLevels.put(player.getUUID(), exhaustion);
+                }
+            }
+        }
+    }
+}
