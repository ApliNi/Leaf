From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: violetc <58360096+s-yh-china@users.noreply.github.com>
Date: Wed, 25 Jan 2023 11:03:53 +0800
Subject: [PATCH] Leaves: Appleskin Protocol

Original license: GPLv3
Original project: https://github.com/LeavesMC/Leaves

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 724c67fd1d534339d3006d92da613fec1efd42c9..89ed7ae9546f3ff76fb7d3114b9bebdceebfaa3b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1586,6 +1586,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             GameTestTicker.SINGLETON.tick();
         }
 
+        top.leavesmc.leaves.protocol.AppleSkinProtocol.tick(); // Leaves - appleskin
+
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         for (int i = 0; i < this.tickables.size(); ++i) {
             ((Runnable) this.tickables.get(i)).run();
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index ba3278bde95344852bed678438a51dd5596892e2..621875cc5ecb613b7a64067d1c0805305977b9a3 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -359,6 +359,7 @@ public abstract class PlayerList {
         player.didPlayerJoinEvent = true; // Gale - EMC - do not process chat/commands before player has joined
 
         top.leavesmc.leaves.protocol.JadeProtocol.onPlayerJoin(player); // Leaves - Jade
+        top.leavesmc.leaves.protocol.AppleSkinProtocol.onPlayerLoggedIn(player); // Leaves - appleskin
 
         final net.kyori.adventure.text.Component jm = playerJoinEvent.joinMessage();
 
@@ -609,6 +610,7 @@ public abstract class PlayerList {
         return this.remove(entityplayer, net.kyori.adventure.text.Component.translatable("multiplayer.player.left", net.kyori.adventure.text.format.NamedTextColor.YELLOW, io.papermc.paper.configuration.GlobalConfiguration.get().messages.useDisplayNameInQuitMessage ? entityplayer.getBukkitEntity().displayName() : PaperAdventure.asAdventure(entityplayer.getDisplayName())));
     }
     public net.kyori.adventure.text.Component remove(ServerPlayer entityplayer, net.kyori.adventure.text.Component leaveMessage) {
+        top.leavesmc.leaves.protocol.AppleSkinProtocol.onPlayerLoggedOut(entityplayer); // Leaves - appleskin
         // Paper end
         org.purpurmc.purpur.task.BossBarTask.removeFromAll(entityplayer.getBukkitEntity()); // Purpur
         ServerLevel worldserver = entityplayer.serverLevel();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 2b185b0f8dc9b7f2da0b30f2b393fcf7025f87b2..75cf48291652016c664e035ce467b17d53fffcff 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1083,6 +1083,13 @@ public final class CraftServer implements Server {
             top.leavesmc.leaves.protocol.JadeProtocol.enableAllPlayer();
         }
         // Leaves end - Jade
+        // Leaves start - appleskin
+        if (LeafConfig.appleskinProtocol) {
+            top.leavesmc.leaves.protocol.AppleSkinProtocol.enableAllPlayer();
+        } else {
+            top.leavesmc.leaves.protocol.AppleSkinProtocol.disableAllPlayer();
+        }
+        // Leaves end - appleskin
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/dreeam/leaf/LeafConfig.java b/src/main/java/org/dreeam/leaf/LeafConfig.java
index bc008690cbd87579f98c7c3686321513947f07e6..bce7b0d5dbd1a6e9fe4f656e057550c8861b8ce4 100644
--- a/src/main/java/org/dreeam/leaf/LeafConfig.java
+++ b/src/main/java/org/dreeam/leaf/LeafConfig.java
@@ -255,7 +255,9 @@ public class LeafConfig {
     }
 
     public static boolean jadeProtocol = false;
+    public static boolean appleskinProtocol = false;
     private static void network() {
         jadeProtocol = getBoolean("network.protocol.jade-protocol", jadeProtocol);
+        appleskinProtocol = getBoolean("network.protocol.appleskin-protocol", appleskinProtocol);
     }
 }
diff --git a/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java b/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java
new file mode 100644
index 0000000000000000000000000000000000000000..61e4447c7b26ad8501cc3d3735b6cd78d5dd1b6e
--- /dev/null
+++ b/src/main/java/top/leavesmc/leaves/protocol/AppleSkinProtocol.java
@@ -0,0 +1,95 @@
+package top.leavesmc.leaves.protocol;
+
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.food.FoodData;
+import org.dreeam.leaf.LeafConfig;
+import org.jetbrains.annotations.Contract;
+import org.jetbrains.annotations.NotNull;
+import top.leavesmc.leaves.util.ProtocolUtils;
+
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.UUID;
+
+public class AppleSkinProtocol {
+
+    public static final String PROTOCOL_ID = "appleskin";
+
+    private static final ResourceLocation SATURATION_KEY = id("saturation_sync");
+    private static final ResourceLocation EXHAUSTION_KEY = id("exhaustion_sync");
+
+    private static final Map<UUID, Float> previousSaturationLevels = new HashMap<>();
+    private static final Map<UUID, Float> previousExhaustionLevels = new HashMap<>();
+
+    private static final float MINIMUM_EXHAUSTION_CHANGE_THRESHOLD = 0.01F;
+
+    private static final Set<ServerPlayer> players = new HashSet<>();
+
+    @Contract("_ -> new")
+    public static @NotNull ResourceLocation id(String path) {
+        return new ResourceLocation(PROTOCOL_ID, path);
+    }
+
+    public static void enableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedIn(player);
+        }
+    }
+
+    public static void disableAllPlayer() {
+        for (ServerPlayer player : MinecraftServer.getServer().getPlayerList().getPlayers()) {
+            onPlayerLoggedOut(player);
+        }
+    }
+
+    public static void onPlayerLoggedIn(@NotNull ServerPlayer player) {
+        if (LeafConfig.appleskinProtocol) {
+            players.add(player);
+            resetPlayerData(player);
+        }
+    }
+
+    public static void onPlayerLoggedOut(@NotNull ServerPlayer player) {
+        if (LeafConfig.appleskinProtocol) {
+            players.remove(player);
+            resetPlayerData(player);
+        }
+    }
+
+    private static void resetPlayerData(@NotNull ServerPlayer player) {
+        previousExhaustionLevels.remove(player.getUUID());
+        previousSaturationLevels.remove(player.getUUID());
+    }
+
+    public static void tick() {
+        if (LeafConfig.appleskinProtocol) {
+            for (ServerPlayer player : players) {
+                FoodData data = player.getFoodData();
+
+                float saturation = data.getSaturationLevel();
+                Float previousSaturation = previousSaturationLevels.get(player.getUUID());
+                if (previousSaturation == null || saturation != previousSaturation) {
+                    FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                    buf.writeFloat(saturation);
+                    ProtocolUtils.sendPayloadPacket(player, SATURATION_KEY, buf);
+                    previousSaturationLevels.put(player.getUUID(), saturation);
+                }
+
+                float exhaustion = data.getExhaustionLevel();
+                Float previousExhaustion = previousExhaustionLevels.get(player.getUUID());
+                if (previousExhaustion == null || Math.abs(exhaustion - previousExhaustion) >= MINIMUM_EXHAUSTION_CHANGE_THRESHOLD) {
+                    FriendlyByteBuf buf = new FriendlyByteBuf(Unpooled.buffer());
+                    buf.writeFloat(exhaustion);
+                    ProtocolUtils.sendPayloadPacket(player, EXHAUSTION_KEY, buf);
+                    previousExhaustionLevels.put(player.getUUID(), exhaustion);
+                }
+            }
+        }
+    }
+}
